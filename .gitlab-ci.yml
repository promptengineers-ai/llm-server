stages:
  - test
  - build
  - deploy

variables:
  BUCKET: pe-oss-bucket
  S3_REGION: us-east-1
  PYTHONPATH: "${CI_PROJECT_DIR}/backend/src:${CI_PROJECT_DIR}/backend"
  GCP_PROJECT: pe-open-source-chat

# Define the template to set DOCKER_IMAGE_TAG
.set_docker_image_tag_template: &set_docker_image_tag_template
  - |
    if [ "$CI_COMMIT_REF_NAME" == "development" ]; then
      export DOCKER_IMAGE_TAG="$CI_COMMIT_SHORT_SHA"
    else
      export DOCKER_IMAGE_TAG="$CI_COMMIT_REF_NAME"
    fi

cache:
  paths:
    - .cache/pip

# test:
#   stage: test
#   image: python:3.10
#   variables:
#     APP_ENV: test
#     APP_SECRET: this-is-a-test-secret
#   before_script:
#     - python --version
#     - pip install --upgrade pip
#     - env | sort
#   script:
#     - cd backend
#     - mkdir -p data
#     - pip install uv
#     - uv pip install -v --system --no-cache-dir -c constraints.txt -r requirements.txt -r requirements-dev.txt
#     - pytest -rs
#   # only:
#   #   changes:
#   #     - backend/**/*
#   except:
#     - tags

# build:
#   stage: build
#   image: docker:latest
#   services:
#     - docker:dind
#   before_script:
#     - docker login -u "$CI_REGISTRY_USER" -p "$CI_JOB_TOKEN" "$CI_REGISTRY"
#     - *set_docker_image_tag_template
#   script:
#     - cd backend
#     - docker build -t "$CI_REGISTRY_IMAGE:${DOCKER_IMAGE_TAG}" .
#     - docker push "$CI_REGISTRY_IMAGE:${DOCKER_IMAGE_TAG}"
#   only:
#     - development
#     - tags

build:
  stage: build
  image: docker:20.10.16
  services:
    - docker:dind
  variables:
    DOCKER_IMAGE: gcr.io/$GCP_PROJECT/$CI_PROJECT_NAME:$DOCKER_IMAGE_TAG
  before_script:
    - echo "$GCP_SA_KEY" | base64 -d > /tmp/gcp_key.json
    - gcloud auth activate-service-account --key-file=/tmp/gcp_key.json
    - gcloud config set project $GCP_PROJECT
    - gcloud auth configure-docker
    - docker login -u _json_key --password-stdin https://gcr.io < /tmp/gcp_key.json
    - *set_docker_image_tag_template
  script:
    - cd backend
    - docker build -t "$DOCKER_IMAGE" .
    - docker push "$DOCKER_IMAGE"
  after_script:
    - rm /tmp/gcp_key.json
  only:
    - development
    - tags
  privileged: true


# deploy:
#   stage: deploy
#   image: google/cloud-sdk:latest
#   needs: [build]
#   environment:
#     name: $CI_COMMIT_REF_NAME
#   variables:
#     APP_ENV: development
#     APP_ADMIN_EMAIL: admin@example.com
#     APP_ADMIN_PASS: test1234
#     APP_WORKERS: 1
#     GCP_PROJECT: pe-open-source-chat
#     GCP_SERVICE_NAME: llm-server-dev
#     DOCKER_IMAGE: $CI_REGISTRY_IMAGE:$DOCKER_IMAGE_TAG
#   before_script:
#     - *set_docker_image_tag_template
#     - export DOCKER_IMAGE="$CI_REGISTRY_IMAGE:$DOCKER_IMAGE_TAG"
#     - env | sort
#     - echo "$GCP_SA_KEY" | base64 -d > /tmp/gcp_key.json
#     - gcloud auth activate-service-account --key-file=/tmp/gcp_key.json
#     - gcloud config set project $GCP_PROJECT
#     - |
#       mkdir -p ~/.docker
#       echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$GITLAB_USERNAME\",\"password\":\"$GITLAB_PASSWORD\"}}}" > ~/.docker/config.json
#   after_script:
#     - rm /tmp/gcp_key.json
#   script:
#     - echo "Deploying $DOCKER_IMAGE to Cloud Run Server"
#     - |
#       declare -a ENV_VARS=(
#         ## App
#         "APP_ENV=$APP_ENV"
#         "APP_VERSION=$DOCKER_IMAGE_TAG"
#         "APP_SECRET=$APP_SECRET"
#         "APP_ADMIN_EMAIL=$APP_ADMIN_EMAIL"
#         "APP_ADMIN_PASS=$APP_ADMIN_PASS"
#         "APP_WORKERS=$APP_WORKERS"

#         ## Database
#         "DATABASE_URL=$DATABASE_URL"
#         "REDIS_URL=$REDIS_URL"
#         "POSTGRES_URL=$POSTGRES_URL"

#         ## LLM
#         "AZURE_OPENAI_API_KEY=$AZURE_OPENAI_API_KEY"
#         "AZURE_OPENAI_ENDPOINT=$AZURE_OPENAI_ENDPOINT"
#         "OPENAI_API_KEY=$OPENAI_API_KEY"
#         "GROQ_API_KEY=$GROQ_API_KEY"
#         "ANTHROPIC_API_KEY=$ANTHROPIC_API_KEY"

#         ## Storage
#         "BUCKET=$BUCKET"
#         "S3_REGION=$S3_REGION"
#         "ACCESS_KEY_ID=$ACCESS_KEY_ID"
#         "ACCESS_SECRET_KEY=$ACCESS_SECRET_KEY"
#       )

#       # Join array elements into a comma-separated string
#       VARS=$(IFS=,; echo "${ENV_VARS[*]}")

#       # Deploy
#       gcloud run deploy $GCP_SERVICE_NAME \
#         --image $DOCKER_IMAGE \
#         --platform managed \
#         --region us-central1 \
#         --allow-unauthenticated \
#         --set-env-vars $VARS \
#         --update-secrets=google-cloud-secret=gitlab-docker-config:latest

#   only:
#     - development
#     - tags